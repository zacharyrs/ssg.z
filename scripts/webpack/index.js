const path = require('path')

const webpack = require('webpack')
const WebpackBar = require('webpackbar')
const CleanWebpackPlugin = require('clean-webpack-plugin')
const FixStyleOnlyEntriesPlugin = require('webpack-fix-style-only-entries')
const ExtractCssChunks = require('extract-css-chunks-webpack-plugin')
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')
const UglifyJsPlugin = require('uglifyjs-webpack-plugin')

const dev = process.env.NODE_ENV === 'development'

const site = require(path.resolve('./content/data.json'))

const config = {
  entry: {
    // TODO - HTML: Need to find solution to extract-loader issue with html interpolation
    // Will also need to figure out injecting the styles chunk

    // The following entries are generated by gulp and include all html inputs, and style inputs
    // html: './.cache/html.js',
    styles: [
      ...(dev ? ['webpack-hot-middleware/client?path=/__webpack_hmr&timeout=20000&reload=true'] : []),
      './base/components/main.scss',
    ],
  },
  mode: process.env.NODE_ENV,
  watch: dev,
  context: path.resolve(__dirname, '../../src/'),
  output: {
    path: path.resolve(__dirname, '../../', dev ? './dist' : './build'),
    filename: dev ? '[name].js' : '[name].[contenthash].js',
    publicPath: '',
  },
  devtool: dev ? 'source-map' : 'hidden-source-map',
  module: {
    rules: [
      {
        test: /\.(gif|png|jpe?g)$/,
        exclude: /node_modules|cache\/favicons\/assets/,
        use: [
          '../scripts/webpack/loaders/sqip-loader.js',
          {
            loader: 'url-loader',
            options: {
              fallback: {
                loader: 'responsive-loader',
                options: {
                  sizes: [300, 600, 1200, 2000],
                  name: 'images/[name]-[hash]-[width].[ext]',
                  format: 'png',
                  disable: dev,
                  adapter: require('responsive-loader/sharp'),
                },
              },
              limit: 40960,
            },
          },
        ],
      },
      {
        test: /content\/.favicons\/assets\/*$/,
        use: {
          loader: 'file-loader',
          options: {
            name: '[path][name].[ext]',
            outputPath: url => {
              return path.relative('./.content/.favicons', url)
            },
          },
        },
      },
      {
        enforce: 'pre',
        test: /\.js$/,
        exclude: /node_modules/,
        use: [
          '../scripts/webpack/loaders/xo-loader.js',
          {
            loader: 'prettier-loader',
            options: {
              parser: 'babylon',
            },
          },
        ],
      },
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
        },
      },
      {
        test: /\.scss/,
        exclude: /node_modules/,
        use: [
          ExtractCssChunks.loader,
          {
            loader: 'css-loader',
            options: {
              importLoaders: 1,
              sourceMap: true,
            },
          },
          'postcss-loader',
          {
            loader: 'sass-loader',
            options: {
              sourceMap: true,
            },
          },
        ],
      },
      {
        test: /\.html/,
        exclude: /node_modules/,
        use: [
          // TODO - HTML: Waiting on extract-loader fix for interpolation
          // {
          //   loader: 'file-loader',
          //   options: {
          //     name: '[path][name].[ext]',
          //     outputPath: (url, resourcePath, context) => {
          //       return path.relative('./.cache/html', url)
          //     },
          //   },
          // },
          // 'extract-loader',
          {
            loader: 'html-loader',
            options: {
              interpolate: true,
            },
          },
        ],
      },
    ],
  },
  resolve: { modules: [path.resolve('.'), 'node_modules'] },
  plugins: [
    new WebpackBar(),
    ...(dev
      ? [new webpack.HotModuleReplacementPlugin()]
      : [
          new CleanWebpackPlugin('./build', { root: path.resolve('../') }),
          new FixStyleOnlyEntriesPlugin({ extensions: ['sss', 'css'] }),
        ]),
    new webpack.BannerPlugin(
      `[name]-[file]-[hash]-${new Date().toISOString().slice(0, 10)}\n Copyright ${site.siteName}`,
    ),
    new ExtractCssChunks({
      filename: dev ? '[name].css' : '[name].[contenthash].css',
      hot: true,
    }),
  ],
  optimization: {
    splitChunks: {
      cacheGroups: {
        vendors: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendor',
          chunks: 'all',
        },
      },
    },
    minimizer: [
      new UglifyJsPlugin({
        cache: true,
        parallel: true,
        sourceMap: true,
      }),
      new OptimizeCssAssetsPlugin({
        cssProcessorOptions: {},
        cssProcessorPluginOptions: {
          preset: ['default', { discardComments: { removeAll: true } }],
        },
        canPrint: true,
      }),
    ],
  },
  performance: {
    assetFilter: assetFilename => {
      return !/\.(map|gif|png|jpe?g)/.test(assetFilename)
    },
  },
}

module.exports = { config }
